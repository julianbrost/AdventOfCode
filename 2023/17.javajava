#!/usr/bin/env -S java --source 11
// vim: syntax=java

// Wondering about the strange file name?
// Java allows a shebang, but only if the file is not named `*.java`.

import java.util.Scanner;
import java.util.ArrayList;
import java.util.PriorityQueue;

class Day17 {
	public static void main(String[] args) {
		int[][] map = readInput();
		System.out.printf("Part 1: %d\n", solve(map, 1, 3));
		System.out.printf("Part 2: %d\n", solve(map, 4, 10));
	}

	private static int[][] readInput() {
		Scanner input = new Scanner(System.in);
		ArrayList<String> lines = new ArrayList<>();
		while (input.hasNext()) {
			lines.add(input.nextLine());
		}

		int[][] map = new int[lines.size()][lines.stream().mapToInt(String::length).max().orElse(0)];
		for (int i = 0; i < map.length; i++) {
			for (int j = 0; j < map[i].length; j++) {
				map[i][j] = Character.getNumericValue(lines.get(i).charAt(j));
			}
		}
		return map;
	}

	private static int solve(int[][] map, int mmin, int mmax) {
		int N = map.length;
		int M = map[0].length;

		PriorityQueue<QueueEntry> q = new PriorityQueue<QueueEntry>();
		int[][][] dist = new int[N][M][2];
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				dist[i][j][0] = dist[i][j][1] = Integer.MAX_VALUE;
			}
		}

		dist[0][0][0] = dist[0][0][1] = 0;
		q.add(new QueueEntry(0, 0, 0, 0));
		q.add(new QueueEntry(0, 0, 0, 1));

		int[] ms = new int[2 * (mmax - mmin + 1)];
		for (int m = mmin; m <= mmax; m++) {
			ms[2 * (m - mmin) + 0] = +m;
			ms[2 * (m - mmin) + 1] = -m;
		}

		while (!q.isEmpty()) {
			QueueEntry c = q.remove();
			if (dist[c.i][c.j][c.d] < c.s) continue;

			int d = 1 - c.d;

			for (int m : ms) {
				int i = c.i + (d == 0 ? m : 0);
				int j = c.j + (d == 1 ? m : 0);
				if (i < 0 || i >= N || j < 0 || j >= M) continue;

				int s = dist[c.i][c.j][c.d];
				for (int l = Integer.signum(m); Math.abs(l) <= Math.abs(m); l += Integer.signum(m)) {
					s += map[c.i + (d == 0 ? l : 0)][c.j + (d == 1 ? l : 0)];
				}

				if (s < dist[i][j][d]) {
					dist[i][j][d] = s;
					q.add(new QueueEntry(s, i, j, d));
				}
			}
		}

		return Math.min(dist[N-1][M-1][0], dist[N-1][M-1][1]);
	}

	private static class QueueEntry implements Comparable<QueueEntry> {
		private int s, i, j, d;

		private QueueEntry(int s, int i, int j, int d) {
			this.s = s;
			this.i = i;
			this.j = j;
			this.d = d;
		}

		public int compareTo(QueueEntry other) {
			return Integer.compare(this.s, other.s);
		}
	}
}

